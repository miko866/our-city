<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" autoReload="true" internalLogLevel="Info"
      internalLogFile="./Log/internal-nlog.txt"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd">

    <!-- enable asp.net core layout renderers -->
    <extensions>
        <add assembly="NLog.Web.AspNetCore"/>
    </extensions>

    <!-- the targets to write to -->
    <targets>
        <!-- Colored console -->
        <!-- https://github.com/NLog/NLog/wiki/ColoredConsole-target -->
        <target xsi:type="ColoredConsole"
                name="Console"
                encoding="utf-8"
                layout="${longdate}|${pad:padding=5:inner=${level:uppercase=true}}|${message}"
                useDefaultRowHighlightingRules="false"
                stderr="false"
                enableAnsiOutput="true"
                detectConsoleAvailable="true"
                detectOutputRedirected="true">
            <highlight-row condition="level == LogLevel.Trace" foregroundColor="Gray"/>
            <highlight-row condition="level == LogLevel.Debug" foregroundColor="Cyan"/>
            <highlight-row condition="level == LogLevel.Info" foregroundColor="DarkBlue"/>
            <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow"/>
            <highlight-row condition="level == LogLevel.Error" foregroundColor="Red"/>
            <highlight-row condition="level == LogLevel.Fatal" foregroundColor="DarkRed" backgroundColor="White"/>
        </target>

        <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
        <target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}"/>

        <!-- File Target for all log messages with basic details -->
        <target xsi:type="File" name="allfile" fileName="./Log/nlog-all-${shortdate}.log"
                layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}"/>

        <!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
        <target xsi:type="File" name="ownFile-web" fileName="./Log/nlog-own-${shortdate}.log"
                layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}"/>

        <!-- Save into DB configs -->
        <target name="database" xsi:type="Database" dbProvider="Npgsql.NpgsqlConnection, Npgsql"
                connectionString="Host=localhost;Database=our_city_dev;Username=unicorn_user;Password=magical_password">

            <commandText>
                insert into logs
                (application, logged, level, message, logger, callsite, exception, guid)
                values
                (@application, @logged, @level, @message, @logger, @callsite, @exception, @guid);
            </commandText>

            <parameter name="@application" layout="AspNetCoreNlog"/>
            <parameter name="@logged" layout="${date}"/>
            <parameter name="@level" layout="${level}"/>
            <parameter name="@message" layout="${message}"/>
            <parameter name="@logger" layout="${logger}"/>
            <parameter name="@callSite" layout="${callsite:filename=true}"/>
            <parameter name="@exception" layout="${exception}"/>
            <parameter name="@guid" layout="${event-properties:item=runGuid}"/>
        </target>
    </targets>

    <!-- rules to map from logger name to target -->
    <rules>
        <!--All logs, including from Microsoft-->
        <!--Skip non-critical Microsoft logs and so log only own logs-->
        <logger name="Microsoft.*" maxlevel="Info" final="true"/>

        <!--Output hosting lifetime messages to console target for faster startup detection -->
        <logger name="Microsoft.Hosting.Lifetime" maxlevel="Info" writeTo="lifetimeConsole, ownFile-web" final="true"/>
        <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
        <logger name="System.Net.Http.*" maxlevel="Info" final="true"/>

        <logger name="*" minlevel="Info" writeTo="allfile"/>
        <logger name="*" minlevel="Info" writeTo="Console"/>
        <logger name="*" minlevel="Info" writeTo="database"/>
        <!-- BlackHole without writeTo -->
        <logger name="*" minlevel="Info" writeTo="ownFile-web"/>
    </rules>
</nlog>